// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "bytetrade.io/web3os/tapr/pkg/apis/apr/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRedixClusters implements RedixClusterInterface
type FakeRedixClusters struct {
	Fake *FakeAprV1alpha1
	ns   string
}

var redixclustersResource = v1alpha1.SchemeGroupVersion.WithResource("redixclusters")

var redixclustersKind = v1alpha1.SchemeGroupVersion.WithKind("RedixCluster")

// Get takes name of the redixCluster, and returns the corresponding redixCluster object, and an error if there is any.
func (c *FakeRedixClusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.RedixCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(redixclustersResource, c.ns, name), &v1alpha1.RedixCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RedixCluster), err
}

// List takes label and field selectors, and returns the list of RedixClusters that match those selectors.
func (c *FakeRedixClusters) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.RedixClusterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(redixclustersResource, redixclustersKind, c.ns, opts), &v1alpha1.RedixClusterList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.RedixClusterList{ListMeta: obj.(*v1alpha1.RedixClusterList).ListMeta}
	for _, item := range obj.(*v1alpha1.RedixClusterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested redixClusters.
func (c *FakeRedixClusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(redixclustersResource, c.ns, opts))

}

// Create takes the representation of a redixCluster and creates it.  Returns the server's representation of the redixCluster, and an error, if there is any.
func (c *FakeRedixClusters) Create(ctx context.Context, redixCluster *v1alpha1.RedixCluster, opts v1.CreateOptions) (result *v1alpha1.RedixCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(redixclustersResource, c.ns, redixCluster), &v1alpha1.RedixCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RedixCluster), err
}

// Update takes the representation of a redixCluster and updates it. Returns the server's representation of the redixCluster, and an error, if there is any.
func (c *FakeRedixClusters) Update(ctx context.Context, redixCluster *v1alpha1.RedixCluster, opts v1.UpdateOptions) (result *v1alpha1.RedixCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(redixclustersResource, c.ns, redixCluster), &v1alpha1.RedixCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RedixCluster), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeRedixClusters) UpdateStatus(ctx context.Context, redixCluster *v1alpha1.RedixCluster, opts v1.UpdateOptions) (*v1alpha1.RedixCluster, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(redixclustersResource, "status", c.ns, redixCluster), &v1alpha1.RedixCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RedixCluster), err
}

// Delete takes name of the redixCluster and deletes it. Returns an error if one occurs.
func (c *FakeRedixClusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(redixclustersResource, c.ns, name, opts), &v1alpha1.RedixCluster{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRedixClusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(redixclustersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.RedixClusterList{})
	return err
}

// Patch applies the patch and returns the patched redixCluster.
func (c *FakeRedixClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.RedixCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(redixclustersResource, c.ns, name, pt, data, subresources...), &v1alpha1.RedixCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RedixCluster), err
}
