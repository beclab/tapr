// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "bytetrade.io/web3os/tapr/pkg/apis/apr/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PGClusterRestoreLister helps list PGClusterRestores.
// All objects returned here must be treated as read-only.
type PGClusterRestoreLister interface {
	// List lists all PGClusterRestores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PGClusterRestore, err error)
	// PGClusterRestores returns an object that can list and get PGClusterRestores.
	PGClusterRestores(namespace string) PGClusterRestoreNamespaceLister
	PGClusterRestoreListerExpansion
}

// pGClusterRestoreLister implements the PGClusterRestoreLister interface.
type pGClusterRestoreLister struct {
	indexer cache.Indexer
}

// NewPGClusterRestoreLister returns a new PGClusterRestoreLister.
func NewPGClusterRestoreLister(indexer cache.Indexer) PGClusterRestoreLister {
	return &pGClusterRestoreLister{indexer: indexer}
}

// List lists all PGClusterRestores in the indexer.
func (s *pGClusterRestoreLister) List(selector labels.Selector) (ret []*v1alpha1.PGClusterRestore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PGClusterRestore))
	})
	return ret, err
}

// PGClusterRestores returns an object that can list and get PGClusterRestores.
func (s *pGClusterRestoreLister) PGClusterRestores(namespace string) PGClusterRestoreNamespaceLister {
	return pGClusterRestoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PGClusterRestoreNamespaceLister helps list and get PGClusterRestores.
// All objects returned here must be treated as read-only.
type PGClusterRestoreNamespaceLister interface {
	// List lists all PGClusterRestores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PGClusterRestore, err error)
	// Get retrieves the PGClusterRestore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PGClusterRestore, error)
	PGClusterRestoreNamespaceListerExpansion
}

// pGClusterRestoreNamespaceLister implements the PGClusterRestoreNamespaceLister
// interface.
type pGClusterRestoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PGClusterRestores in the indexer for a given namespace.
func (s pGClusterRestoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PGClusterRestore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PGClusterRestore))
	})
	return ret, err
}

// Get retrieves the PGClusterRestore from the indexer for a given namespace and name.
func (s pGClusterRestoreNamespaceLister) Get(name string) (*v1alpha1.PGClusterRestore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pgclusterrestore"), name)
	}
	return obj.(*v1alpha1.PGClusterRestore), nil
}
